{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5","program":"/Users/ryota/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","arbitrary","--edition=2018","/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=22a31571f220ccdf","-C","extra-filename=-22a31571f220ccdf","--out-dir","/Users/ryota/Desktop/Sound_TEST/project3_cargo/target/rls/debug/deps","-L","dependency=/Users/ryota/Desktop/Sound_TEST/project3_cargo/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/ryota/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/ryota/Desktop/Sound_TEST/project3_cargo/target/rls/debug/deps/libarbitrary-22a31571f220ccdf.rmeta"},"prelude":{"crate_id":{"name":"arbitrary","disambiguator":[451293186435422803,10546222701972351756]},"crate_root":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src","external_crates":[{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12678783859402539130,11033699271647822562]}},{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5902495869598878631,6483651549774204679]}},{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12311488937759207811,9591695617658421232]}},{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13642764918293034548,9567326413417207759]}},{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13989086203811079768,14781321679734955535]}},{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18262239609673298908,5174085264251780333]}},{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15596655843449967889,8729491543963844827]}},{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8633493352746497996,3308549486174864674]}},{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[9090856330303166257,15266389826979080272]}},{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[10275868503320404072,15700038594031858524]}},{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[16931781941529345914,7757858263785678856]}},{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17386117254425836477,8366695672852535875]}},{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6497267535012603728,15523194060056832509]}},{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[5307688171077319232,12990389752959085457]}}],"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":359,"byte_end":45367,"line_start":9,"line_end":1431,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":1010,"byte_end":1011,"line_start":26,"line_end":26,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"Result, Error","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":22},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":1103,"byte_end":1115,"line_start":33,"line_end":33,"column_start":23,"column_end":35},"alias_span":null,"name":"Unstructured","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":359,"byte_end":45367,"line_start":9,"line_end":1431,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":152},{"krate":0,"index":522},{"krate":0,"index":528},{"krate":0,"index":534},{"krate":0,"index":540},{"krate":0,"index":546},{"krate":0,"index":552},{"krate":0,"index":558},{"krate":0,"index":564},{"krate":0,"index":570},{"krate":0,"index":576},{"krate":0,"index":582},{"krate":0,"index":588},{"krate":0,"index":153},{"krate":0,"index":594},{"krate":0,"index":599},{"krate":0,"index":154},{"krate":0,"index":163},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":175},{"krate":0,"index":183},{"krate":0,"index":191},{"krate":0,"index":195},{"krate":0,"index":200},{"krate":0,"index":205},{"krate":0,"index":211},{"krate":0,"index":1104},{"krate":0,"index":1096},{"krate":0,"index":1087},{"krate":0,"index":1077},{"krate":0,"index":1066},{"krate":0,"index":1054},{"krate":0,"index":1041},{"krate":0,"index":1027},{"krate":0,"index":1012},{"krate":0,"index":996},{"krate":0,"index":979},{"krate":0,"index":961},{"krate":0,"index":942},{"krate":0,"index":922},{"krate":0,"index":901},{"krate":0,"index":879},{"krate":0,"index":856},{"krate":0,"index":832},{"krate":0,"index":807},{"krate":0,"index":781},{"krate":0,"index":754},{"krate":0,"index":726},{"krate":0,"index":697},{"krate":0,"index":667},{"krate":0,"index":636},{"krate":0,"index":604},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":1421},{"krate":0,"index":1411},{"krate":0,"index":1401},{"krate":0,"index":1391},{"krate":0,"index":1381},{"krate":0,"index":1371},{"krate":0,"index":1361},{"krate":0,"index":1351},{"krate":0,"index":1341},{"krate":0,"index":1331},{"krate":0,"index":1321},{"krate":0,"index":1311},{"krate":0,"index":1301},{"krate":0,"index":1291},{"krate":0,"index":1281},{"krate":0,"index":1271},{"krate":0,"index":1261},{"krate":0,"index":1251},{"krate":0,"index":1241},{"krate":0,"index":1231},{"krate":0,"index":1221},{"krate":0,"index":1211},{"krate":0,"index":1201},{"krate":0,"index":1191},{"krate":0,"index":1181},{"krate":0,"index":1171},{"krate":0,"index":1161},{"krate":0,"index":1151},{"krate":0,"index":1141},{"krate":0,"index":1131},{"krate":0,"index":1121},{"krate":0,"index":1111},{"krate":0,"index":223},{"krate":0,"index":231},{"krate":0,"index":238},{"krate":0,"index":247},{"krate":0,"index":255},{"krate":0,"index":263},{"krate":0,"index":272},{"krate":0,"index":280},{"krate":0,"index":288},{"krate":0,"index":296},{"krate":0,"index":302},{"krate":0,"index":311},{"krate":0,"index":320},{"krate":0,"index":324},{"krate":0,"index":328},{"krate":0,"index":334},{"krate":0,"index":342},{"krate":0,"index":349},{"krate":0,"index":355},{"krate":0,"index":361},{"krate":0,"index":365},{"krate":0,"index":370},{"krate":0,"index":374},{"krate":0,"index":379},{"krate":0,"index":383},{"krate":0,"index":387}],"decl_id":null,"docs":" The `Arbitrary` trait crate.","sig":null,"attributes":[{"value":"! The `Arbitrary` trait crate.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":359,"byte_end":391,"line_start":9,"line_end":9,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":392,"byte_end":395,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! This trait provides an [`Arbitrary`](./trait.Arbitrary.html) trait to","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":396,"byte_end":469,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"! produce well-typed, structured values, from raw, byte buffers. It is","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":470,"byte_end":542,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"! generally intended to be used with fuzzers like AFL or libFuzzer. See the","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":543,"byte_end":620,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"! [`Arbitrary`](./trait.Arbitrary.html) trait's documentation for details on","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":621,"byte_end":699,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"! automatically deriving, implementing, and/or using the trait.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":700,"byte_end":765,"line_start":15,"line_end":15,"column_start":1,"column_end":66}},{"value":"deny(bad_style)","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":767,"byte_end":786,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":787,"byte_end":809,"line_start":18,"line_end":18,"column_start":1,"column_end":23}},{"value":"deny(future_incompatible)","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":810,"byte_end":839,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"deny(nonstandard_style)","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":840,"byte_end":867,"line_start":20,"line_end":20,"column_start":1,"column_end":28}},{"value":"deny(rust_2018_compatibility)","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":868,"byte_end":901,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"deny(rust_2018_idioms)","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":902,"byte_end":928,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"deny(unused)","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":929,"byte_end":945,"line_start":23,"line_end":23,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":393},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":45599,"byte_end":45612,"line_start":9,"line_end":9,"column_start":5,"column_end":18},"name":"NotEnoughData","qualname":"::error::Error::NotEnoughData","value":"Error::NotEnoughData","parent":{"krate":0,"index":392},"children":[],"decl_id":null,"docs":" There was not enough underlying data to fulfill some request for raw\n bytes.\n","sig":null,"attributes":[{"value":"/ There was not enough underlying data to fulfill some request for raw","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":45507,"byte_end":45579,"line_start":7,"line_end":7,"column_start":5,"column_end":77}},{"value":"/ bytes.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":45584,"byte_end":45594,"line_start":8,"line_end":8,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":395},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":45671,"byte_end":45686,"line_start":11,"line_end":11,"column_start":5,"column_end":20},"name":"IncorrectFormat","qualname":"::error::Error::IncorrectFormat","value":"Error::IncorrectFormat","parent":{"krate":0,"index":392},"children":[],"decl_id":null,"docs":" The input bytes were not of the right format\n","sig":null,"attributes":[{"value":"/ The input bytes were not of the right format","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":45618,"byte_end":45666,"line_start":10,"line_end":10,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":392},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":45495,"byte_end":45500,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{NotEnoughData, IncorrectFormat}","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":395}],"decl_id":null,"docs":" An enumeration of buffer creation errors\n","sig":null,"attributes":[{"value":"/ An enumeration of buffer creation errors","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":45393,"byte_end":45437,"line_start":3,"line_end":3,"column_start":1,"column_end":45}},{"value":"non_exhaustive","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":45468,"byte_end":45485,"line_start":5,"line_end":5,"column_start":1,"column_end":18}}]},{"kind":"Type","id":{"krate":0,"index":10},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":46319,"byte_end":46325,"line_start":34,"line_end":34,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"std::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A `Result` with the error type fixed as `arbitrary::Error`.","sig":null,"attributes":[{"value":"/ A `Result` with the error type fixed as `arbitrary::Error`.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":46192,"byte_end":46255,"line_start":31,"line_end":31,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":46256,"byte_end":46259,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Either an `Ok(T)` or `Err(arbitrary::Error)`.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":46260,"byte_end":46309,"line_start":33,"line_end":33,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":13},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unstructured","qualname":"::unstructured","value":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":52},{"krate":0,"index":59},{"krate":0,"index":65},{"krate":0,"index":71},{"krate":0,"index":76},{"krate":0,"index":86},{"krate":0,"index":402},{"krate":0,"index":412},{"krate":0,"index":422},{"krate":0,"index":432},{"krate":0,"index":442},{"krate":0,"index":452},{"krate":0,"index":462},{"krate":0,"index":472},{"krate":0,"index":482},{"krate":0,"index":492},{"krate":0,"index":502},{"krate":0,"index":512}],"decl_id":null,"docs":" Wrappers around raw, unstructured bytes.\n","sig":null,"attributes":[{"value":"! Wrappers around raw, unstructured bytes.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":46722,"byte_end":46766,"line_start":9,"line_end":9,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":22},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49037,"byte_end":49049,"line_start":70,"line_end":70,"column_start":12,"column_end":24},"name":"Unstructured","qualname":"::unstructured::Unstructured","value":"Unstructured {  }","parent":null,"children":[{"krate":0,"index":24}],"decl_id":null,"docs":" A source of unstructured data.","sig":null,"attributes":[{"value":"/ A source of unstructured data.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":46859,"byte_end":46893,"line_start":15,"line_end":15,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":46894,"byte_end":46897,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ An `Unstructured` helps `Arbitrary` implementations interpret raw data","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":46898,"byte_end":46972,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ (typically provided by a fuzzer) as a \"DNA string\" that describes how to","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":46973,"byte_end":47049,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ construct the `Arbitrary` type. The goal is that a small change to the \"DNA","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47050,"byte_end":47129,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ string\" (the raw data wrapped by an `Unstructured`) results in a small","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47130,"byte_end":47204,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ change to the generated `Arbitrary` instance. This helps a fuzzer","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47205,"byte_end":47274,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"/ efficiently explore the `Arbitrary`'s input space.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47275,"byte_end":47329,"line_start":22,"line_end":22,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47330,"byte_end":47333,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ `Unstructured` is deterministic: given the same raw data, the same series of","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47334,"byte_end":47414,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ API calls will return the same results (modulo system resource constraints,","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47415,"byte_end":47494,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ like running out of memory). However, `Unstructured` does not guarantee","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47495,"byte_end":47570,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ anything beyond that: it makes not guarantee that it will yield bytes from","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47571,"byte_end":47649,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ the underlying data in any particular order.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47650,"byte_end":47698,"line_start":28,"line_end":28,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47699,"byte_end":47702,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ You shouldn't generally need to use an `Unstructured` unless you are writing","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47703,"byte_end":47783,"line_start":30,"line_end":30,"column_start":1,"column_end":81}},{"value":"/ a custom `Arbitrary` implementation by hand, instead of deriving it. Mostly,","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47784,"byte_end":47864,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"/ you should just be passing it through to nested `Arbitrary::arbitrary`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47865,"byte_end":47939,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ calls.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47940,"byte_end":47950,"line_start":33,"line_end":33,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47951,"byte_end":47954,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47955,"byte_end":47968,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47969,"byte_end":47972,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Imagine you were writing a color conversion crate. You might want to write","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":47973,"byte_end":48051,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ fuzz tests that take a random RGB color and assert various properties, run","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48052,"byte_end":48130,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ functions and make sure nothing panics, etc.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48131,"byte_end":48179,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48180,"byte_end":48183,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Below is what translating the fuzzer's raw input into an `Unstructured` and","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48184,"byte_end":48263,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"/ using that to generate an arbitrary RGB color might look like:","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48264,"byte_end":48330,"line_start":42,"line_end":42,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48331,"byte_end":48334,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48335,"byte_end":48342,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"derive\")] fn foo() {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48343,"byte_end":48386,"line_start":45,"line_end":45,"column_start":1,"column_end":44}},{"value":"/ use arbitrary::{Arbitrary, Unstructured};","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48387,"byte_end":48432,"line_start":46,"line_end":46,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48433,"byte_end":48436,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ /// An RGB color.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48437,"byte_end":48458,"line_start":48,"line_end":48,"column_start":1,"column_end":22}},{"value":"/ #[derive(Arbitrary)]","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48459,"byte_end":48483,"line_start":49,"line_end":49,"column_start":1,"column_end":25}},{"value":"/ pub struct Rgb {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48484,"byte_end":48504,"line_start":50,"line_end":50,"column_start":1,"column_end":21}},{"value":"/     r: u8,","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48505,"byte_end":48519,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/     g: u8,","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48520,"byte_end":48534,"line_start":52,"line_end":52,"column_start":1,"column_end":15}},{"value":"/     b: u8,","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48535,"byte_end":48549,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48550,"byte_end":48555,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48556,"byte_end":48559,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // Get the raw bytes from the fuzzer.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48560,"byte_end":48601,"line_start":56,"line_end":56,"column_start":1,"column_end":42}},{"value":"/ #   let get_input_from_fuzzer = || &[];","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48602,"byte_end":48645,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"/ let raw_data: &[u8] = get_input_from_fuzzer();","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48646,"byte_end":48696,"line_start":58,"line_end":58,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48697,"byte_end":48700,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Wrap it in an `Unstructured`.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48701,"byte_end":48737,"line_start":60,"line_end":60,"column_start":1,"column_end":37}},{"value":"/ let mut unstructured = Unstructured::new(raw_data);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48738,"byte_end":48793,"line_start":61,"line_end":61,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48794,"byte_end":48797,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ // Generate an `Rgb` color and run our checks.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48798,"byte_end":48848,"line_start":63,"line_end":63,"column_start":1,"column_end":51}},{"value":"/ if let Ok(rgb) = Rgb::arbitrary(&mut unstructured) {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48849,"byte_end":48905,"line_start":64,"line_end":64,"column_start":1,"column_end":57}},{"value":"/ #   let run_my_color_conversion_checks = |_| {};","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48906,"byte_end":48958,"line_start":65,"line_end":65,"column_start":1,"column_end":53}},{"value":"/     run_my_color_conversion_checks(rgb);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":48959,"byte_end":49003,"line_start":66,"line_end":66,"column_start":1,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49004,"byte_end":49009,"line_start":67,"line_end":67,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49010,"byte_end":49017,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49018,"byte_end":49025,"line_start":69,"line_end":69,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49332,"byte_end":49335,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<Unstructured>::new","value":"fn (data: &'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Unstructured` from the given raw data.","sig":null,"attributes":[{"value":"/ Create a new `Unstructured` from the given raw data.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49111,"byte_end":49167,"line_start":75,"line_end":75,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49172,"byte_end":49175,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49180,"byte_end":49193,"line_start":77,"line_end":77,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49198,"byte_end":49201,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49206,"byte_end":49213,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use arbitrary::Unstructured;","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49218,"byte_end":49250,"line_start":80,"line_end":80,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49255,"byte_end":49258,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ let u = Unstructured::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49263,"byte_end":49308,"line_start":82,"line_end":82,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49313,"byte_end":49320,"line_start":83,"line_end":83,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49982,"byte_end":49985,"line_start":107,"line_end":107,"column_start":12,"column_end":15},"name":"len","qualname":"<Unstructured>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of remaining bytes of underlying data that are still\n available.","sig":null,"attributes":[{"value":"/ Get the number of remaining bytes of underlying data that are still","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49403,"byte_end":49474,"line_start":88,"line_end":88,"column_start":5,"column_end":76}},{"value":"/ available.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49479,"byte_end":49493,"line_start":89,"line_end":89,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49498,"byte_end":49501,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49506,"byte_end":49519,"line_start":91,"line_end":91,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49524,"byte_end":49527,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49532,"byte_end":49539,"line_start":93,"line_end":93,"column_start":5,"column_end":12}},{"value":"/ use arbitrary::{Arbitrary, Unstructured};","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49544,"byte_end":49589,"line_start":94,"line_end":94,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49594,"byte_end":49597,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ let mut u = Unstructured::new(&[1, 2, 3]);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49602,"byte_end":49648,"line_start":96,"line_end":96,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49653,"byte_end":49656,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ // Initially have three bytes of data.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49661,"byte_end":49703,"line_start":98,"line_end":98,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(u.len(), 3);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49708,"byte_end":49735,"line_start":99,"line_end":99,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49740,"byte_end":49743,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ // Generating a `bool` consumes one byte from the underlying data, so","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49748,"byte_end":49821,"line_start":101,"line_end":101,"column_start":5,"column_end":78}},{"value":"/ // we are left with two bytes afterwards.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49826,"byte_end":49871,"line_start":102,"line_end":102,"column_start":5,"column_end":50}},{"value":"/ let _ = bool::arbitrary(&mut u);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49876,"byte_end":49912,"line_start":103,"line_end":103,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(u.len(), 2);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49917,"byte_end":49944,"line_start":104,"line_end":104,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49949,"byte_end":49956,"line_start":105,"line_end":105,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49961,"byte_end":49970,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50648,"byte_end":50656,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Unstructured>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the underlying unstructured data exhausted?","sig":null,"attributes":[{"value":"/ Is the underlying unstructured data exhausted?","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50039,"byte_end":50089,"line_start":111,"line_end":111,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50094,"byte_end":50097,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ `unstructured.is_empty()` is the same as `unstructured.len() == 0`.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50102,"byte_end":50173,"line_start":113,"line_end":113,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50178,"byte_end":50181,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50186,"byte_end":50199,"line_start":115,"line_end":115,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50204,"byte_end":50207,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50212,"byte_end":50219,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ use arbitrary::{Arbitrary, Unstructured};","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50224,"byte_end":50269,"line_start":118,"line_end":118,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50274,"byte_end":50277,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ let mut u = Unstructured::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50282,"byte_end":50331,"line_start":120,"line_end":120,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50336,"byte_end":50339,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ // Initially, we are not empty.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50344,"byte_end":50379,"line_start":122,"line_end":122,"column_start":5,"column_end":40}},{"value":"/ assert!(!u.is_empty());","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50384,"byte_end":50411,"line_start":123,"line_end":123,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50416,"byte_end":50419,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ // Generating a `u32` consumes all four bytes of the underlying data, so","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50424,"byte_end":50500,"line_start":125,"line_end":125,"column_start":5,"column_end":81}},{"value":"/ // we become empty afterwards.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50505,"byte_end":50539,"line_start":126,"line_end":126,"column_start":5,"column_end":39}},{"value":"/ let _ = u32::arbitrary(&mut u);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50544,"byte_end":50579,"line_start":127,"line_end":127,"column_start":5,"column_end":40}},{"value":"/ assert!(u.is_empty());","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50584,"byte_end":50610,"line_start":128,"line_end":128,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50615,"byte_end":50622,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50627,"byte_end":50636,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51654,"byte_end":51663,"line_start":166,"line_end":166,"column_start":12,"column_end":21},"name":"arbitrary","qualname":"<Unstructured>::arbitrary","value":"fn <A> (&mut self) -> Result<A>","parent":null,"children":[],"decl_id":null,"docs":" Generate an arbitrary instance of `A`.","sig":null,"attributes":[{"value":"/ Generate an arbitrary instance of `A`.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50709,"byte_end":50751,"line_start":135,"line_end":135,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50756,"byte_end":50759,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ This is simply a helper method that is equivalent to `<A as","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50764,"byte_end":50827,"line_start":137,"line_end":137,"column_start":5,"column_end":68}},{"value":"/ Arbitrary>::arbitrary(self)`. This helper is a little bit more concise,","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50832,"byte_end":50907,"line_start":138,"line_end":138,"column_start":5,"column_end":80}},{"value":"/ and can be used in situations where Rust's type inference will figure","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50912,"byte_end":50985,"line_start":139,"line_end":139,"column_start":5,"column_end":78}},{"value":"/ out what `A` should be.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":50990,"byte_end":51017,"line_start":140,"line_end":140,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51022,"byte_end":51025,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51030,"byte_end":51043,"line_start":142,"line_end":142,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51048,"byte_end":51051,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51056,"byte_end":51063,"line_start":144,"line_end":144,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(feature=\"derive\")] fn foo() -> arbitrary::Result<()> {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51068,"byte_end":51134,"line_start":145,"line_end":145,"column_start":5,"column_end":71}},{"value":"/ use arbitrary::{Arbitrary, Unstructured};","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51139,"byte_end":51184,"line_start":146,"line_end":146,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51189,"byte_end":51192,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ #[derive(Arbitrary)]","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51197,"byte_end":51221,"line_start":148,"line_end":148,"column_start":5,"column_end":29}},{"value":"/ struct MyType {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51226,"byte_end":51245,"line_start":149,"line_end":149,"column_start":5,"column_end":24}},{"value":"/     // ...","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51250,"byte_end":51264,"line_start":150,"line_end":150,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51269,"byte_end":51274,"line_start":151,"line_end":151,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51279,"byte_end":51282,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ fn do_stuff(value: MyType) {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51287,"byte_end":51319,"line_start":153,"line_end":153,"column_start":5,"column_end":37}},{"value":"/ #   let _ = value;","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51324,"byte_end":51346,"line_start":154,"line_end":154,"column_start":5,"column_end":27}},{"value":"/     // ...","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51351,"byte_end":51365,"line_start":155,"line_end":155,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51370,"byte_end":51375,"line_start":156,"line_end":156,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51380,"byte_end":51383,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ let mut u = Unstructured::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51388,"byte_end":51437,"line_start":158,"line_end":158,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51442,"byte_end":51445,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ // Rust's type inference can figure out that `value` should be of type","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51450,"byte_end":51524,"line_start":160,"line_end":160,"column_start":5,"column_end":79}},{"value":"/ // `MyType` here:","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51529,"byte_end":51550,"line_start":161,"line_end":161,"column_start":5,"column_end":26}},{"value":"/ let value = u.arbitrary()?;","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51555,"byte_end":51586,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/ do_stuff(value);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51591,"byte_end":51611,"line_start":163,"line_end":163,"column_start":5,"column_end":25}},{"value":"/ # Ok(()) }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51616,"byte_end":51630,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51635,"byte_end":51642,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":53316,"byte_end":53329,"line_start":212,"line_end":212,"column_start":12,"column_end":25},"name":"arbitrary_len","qualname":"<Unstructured>::arbitrary_len","value":"fn <ElementType> (&mut self) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the number of elements to insert when building up a collection of\n arbitrary `ElementType`s.","sig":null,"attributes":[{"value":"/ Get the number of elements to insert when building up a collection of","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51782,"byte_end":51855,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/ arbitrary `ElementType`s.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51860,"byte_end":51889,"line_start":174,"line_end":174,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51894,"byte_end":51897,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ This uses the [`<ElementType as","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51902,"byte_end":51937,"line_start":176,"line_end":176,"column_start":5,"column_end":40}},{"value":"/ Arbitrary>::size_hint`][crate::Arbitrary::size_hint] method to smartly","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":51942,"byte_end":52016,"line_start":177,"line_end":177,"column_start":5,"column_end":79}},{"value":"/ choose a length such that we most likely have enough underlying bytes to","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52021,"byte_end":52097,"line_start":178,"line_end":178,"column_start":5,"column_end":81}},{"value":"/ construct that many arbitrary `ElementType`s.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52102,"byte_end":52151,"line_start":179,"line_end":179,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52156,"byte_end":52159,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ This should only be called within an `Arbitrary` implementation.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52164,"byte_end":52232,"line_start":181,"line_end":181,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52237,"byte_end":52240,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52245,"byte_end":52258,"line_start":183,"line_end":183,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52263,"byte_end":52266,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52271,"byte_end":52278,"line_start":185,"line_end":185,"column_start":5,"column_end":12}},{"value":"/ use arbitrary::{Arbitrary, Result, Unstructured};","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52283,"byte_end":52336,"line_start":186,"line_end":186,"column_start":5,"column_end":58}},{"value":"/ # pub struct MyCollection<T> { _t: std::marker::PhantomData<T> }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52341,"byte_end":52409,"line_start":187,"line_end":187,"column_start":5,"column_end":73}},{"value":"/ # impl<T> MyCollection<T> {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52414,"byte_end":52445,"line_start":188,"line_end":188,"column_start":5,"column_end":36}},{"value":"/ #     pub fn with_capacity(capacity: usize) -> Self { MyCollection { _t: std::marker::PhantomData } }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52450,"byte_end":52555,"line_start":189,"line_end":189,"column_start":5,"column_end":110}},{"value":"/ #     pub fn insert(&mut self, element: T) {}","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52560,"byte_end":52609,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"/ # }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52614,"byte_end":52621,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52626,"byte_end":52629,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ impl<T> Arbitrary for MyCollection<T>","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52634,"byte_end":52675,"line_start":193,"line_end":193,"column_start":5,"column_end":46}},{"value":"/ where","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52680,"byte_end":52689,"line_start":194,"line_end":194,"column_start":5,"column_end":14}},{"value":"/     T: Arbitrary,","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52694,"byte_end":52715,"line_start":195,"line_end":195,"column_start":5,"column_end":26}},{"value":"/ {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52720,"byte_end":52725,"line_start":196,"line_end":196,"column_start":5,"column_end":10}},{"value":"/     fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52730,"byte_end":52794,"line_start":197,"line_end":197,"column_start":5,"column_end":69}},{"value":"/         // Get the number of `T`s we should insert into our collection.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52799,"byte_end":52874,"line_start":198,"line_end":198,"column_start":5,"column_end":80}},{"value":"/         let len = u.arbitrary_len::<T>()?;","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52879,"byte_end":52925,"line_start":199,"line_end":199,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52930,"byte_end":52933,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/         // And then create a collection of that length!","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":52938,"byte_end":52997,"line_start":201,"line_end":201,"column_start":5,"column_end":64}},{"value":"/         let mut my_collection = MyCollection::with_capacity(len);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":53002,"byte_end":53071,"line_start":202,"line_end":202,"column_start":5,"column_end":74}},{"value":"/         for _ in 0..len {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":53076,"byte_end":53105,"line_start":203,"line_end":203,"column_start":5,"column_end":34}},{"value":"/             let element = T::arbitrary(u)?;","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":53110,"byte_end":53157,"line_start":204,"line_end":204,"column_start":5,"column_end":52}},{"value":"/             my_collection.insert(element);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":53162,"byte_end":53208,"line_start":205,"line_end":205,"column_start":5,"column_end":51}},{"value":"/         }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":53213,"byte_end":53226,"line_start":206,"line_end":206,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":53231,"byte_end":53234,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/         Ok(my_collection)","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":53239,"byte_end":53268,"line_start":208,"line_end":208,"column_start":5,"column_end":34}},{"value":"/     }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":53273,"byte_end":53282,"line_start":209,"line_end":209,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":53287,"byte_end":53292,"line_start":210,"line_end":210,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":53297,"byte_end":53304,"line_start":211,"line_end":211,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56470,"byte_end":56482,"line_start":290,"line_end":290,"column_start":12,"column_end":24},"name":"int_in_range","qualname":"<Unstructured>::int_in_range","value":"fn <T> (&mut self, range: ops::RangeInclusive<T>) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Generate an integer within the given range.","sig":null,"attributes":[{"value":"/ Generate an integer within the given range.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":55795,"byte_end":55842,"line_start":267,"line_end":267,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":55847,"byte_end":55850,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Do not use this to generate the size of a collection. Use","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":55855,"byte_end":55916,"line_start":269,"line_end":269,"column_start":5,"column_end":66}},{"value":"/ `arbitrary_len` instead.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":55921,"byte_end":55949,"line_start":270,"line_end":270,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":55954,"byte_end":55957,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":55962,"byte_end":55974,"line_start":272,"line_end":272,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":55979,"byte_end":55982,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ Panics if `range.start >= range.end`. That is, the given range must be","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":55987,"byte_end":56061,"line_start":274,"line_end":274,"column_start":5,"column_end":79}},{"value":"/ non-empty.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56066,"byte_end":56080,"line_start":275,"line_end":275,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56085,"byte_end":56088,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56093,"byte_end":56106,"line_start":277,"line_end":277,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56111,"byte_end":56114,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56119,"byte_end":56126,"line_start":279,"line_end":279,"column_start":5,"column_end":12}},{"value":"/ use arbitrary::{Arbitrary, Unstructured};","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56131,"byte_end":56176,"line_start":280,"line_end":280,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56181,"byte_end":56184,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ let mut u = Unstructured::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56189,"byte_end":56238,"line_start":282,"line_end":282,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56243,"byte_end":56246,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ let x: i32 = u.int_in_range(-5_000..=-1_000)","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56251,"byte_end":56299,"line_start":284,"line_end":284,"column_start":5,"column_end":53}},{"value":"/     .expect(\"constructed `u` with enough bytes to generate an `i32`\");","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56304,"byte_end":56378,"line_start":285,"line_end":285,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56383,"byte_end":56386,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ assert!(-5_000 <= x);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56391,"byte_end":56416,"line_start":287,"line_end":287,"column_start":5,"column_end":30}},{"value":"/ assert!(x <= -1_000);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56421,"byte_end":56446,"line_start":288,"line_end":288,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":56451,"byte_end":56458,"line_start":289,"line_end":289,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58464,"byte_end":58470,"line_start":359,"line_end":359,"column_start":12,"column_end":18},"name":"choose","qualname":"<Unstructured>::choose","value":"fn <'b, T> (&mut self, choices: &'b [T]) -> Result<&'b T>","parent":null,"children":[],"decl_id":null,"docs":" Choose one of the given choices.","sig":null,"attributes":[{"value":"/ Choose one of the given choices.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":57832,"byte_end":57868,"line_start":336,"line_end":336,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":57873,"byte_end":57876,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ This should only be used inside of `Arbitrary` implementations.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":57881,"byte_end":57948,"line_start":338,"line_end":338,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":57953,"byte_end":57956,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Returns an error if there is not enough underlying data to make a","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":57961,"byte_end":58030,"line_start":340,"line_end":340,"column_start":5,"column_end":74}},{"value":"/ choice.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58035,"byte_end":58046,"line_start":341,"line_end":341,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58051,"byte_end":58054,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58059,"byte_end":58071,"line_start":343,"line_end":343,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58076,"byte_end":58079,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ Panics if `choices` is empty.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58084,"byte_end":58117,"line_start":345,"line_end":345,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58122,"byte_end":58125,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58130,"byte_end":58143,"line_start":347,"line_end":347,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58148,"byte_end":58151,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58156,"byte_end":58163,"line_start":349,"line_end":349,"column_start":5,"column_end":12}},{"value":"/ use arbitrary::Unstructured;","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58168,"byte_end":58200,"line_start":350,"line_end":350,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58205,"byte_end":58208,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ let mut u = Unstructured::new(&[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58213,"byte_end":58280,"line_start":352,"line_end":352,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58285,"byte_end":58288,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ let choices = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58293,"byte_end":58347,"line_start":354,"line_end":354,"column_start":5,"column_end":59}},{"value":"/ if let Ok(ch) = u.choose(&choices) {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58352,"byte_end":58392,"line_start":355,"line_end":355,"column_start":5,"column_end":45}},{"value":"/     println!(\"chose {}\", ch);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58397,"byte_end":58430,"line_start":356,"line_end":356,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58435,"byte_end":58440,"line_start":357,"line_end":357,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58445,"byte_end":58452,"line_start":358,"line_end":358,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59612,"byte_end":59623,"line_start":390,"line_end":390,"column_start":12,"column_end":23},"name":"fill_buffer","qualname":"<Unstructured>::fill_buffer","value":"fn (&mut self, buffer: &mut [u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Fill a `buffer` with bytes from the underlying raw data.","sig":null,"attributes":[{"value":"/ Fill a `buffer` with bytes from the underlying raw data.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58774,"byte_end":58834,"line_start":368,"line_end":368,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58839,"byte_end":58842,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ This should only be called within an `Arbitrary` implementation. This is","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58847,"byte_end":58923,"line_start":370,"line_end":370,"column_start":5,"column_end":81}},{"value":"/ a very low-level operation. You should generally prefer calling nested","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":58928,"byte_end":59002,"line_start":371,"line_end":371,"column_start":5,"column_end":79}},{"value":"/ `Arbitrary` implementations like `<Vec<u8>>::arbitrary` and","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59007,"byte_end":59070,"line_start":372,"line_end":372,"column_start":5,"column_end":68}},{"value":"/ `String::arbitrary` over using this method directly.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59075,"byte_end":59131,"line_start":373,"line_end":373,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59136,"byte_end":59139,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ If this `Unstructured` does not have enough data to fill the whole","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59144,"byte_end":59214,"line_start":375,"line_end":375,"column_start":5,"column_end":75}},{"value":"/ `buffer`, an error is returned.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59219,"byte_end":59254,"line_start":376,"line_end":376,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59259,"byte_end":59262,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59267,"byte_end":59280,"line_start":378,"line_end":378,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59285,"byte_end":59288,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59293,"byte_end":59300,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"/ use arbitrary::Unstructured;","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59305,"byte_end":59337,"line_start":381,"line_end":381,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59342,"byte_end":59345,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ let mut u = Unstructured::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59350,"byte_end":59399,"line_start":383,"line_end":383,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59404,"byte_end":59407,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59412,"byte_end":59437,"line_start":385,"line_end":385,"column_start":5,"column_end":30}},{"value":"/ assert!(u.fill_buffer(&mut buf).is_ok());","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59442,"byte_end":59487,"line_start":386,"line_end":386,"column_start":5,"column_end":50}},{"value":"/ assert!(u.fill_buffer(&mut buf).is_ok());","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59492,"byte_end":59537,"line_start":387,"line_end":387,"column_start":5,"column_end":50}},{"value":"/ assert!(u.fill_buffer(&mut buf).is_err());","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59542,"byte_end":59588,"line_start":388,"line_end":388,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59593,"byte_end":59600,"line_start":389,"line_end":389,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60412,"byte_end":60421,"line_start":412,"line_end":412,"column_start":12,"column_end":21},"name":"get_bytes","qualname":"<Unstructured>::get_bytes","value":"fn (&mut self, size: usize) -> Result<&'a [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Provide `size` bytes from the underlying raw data.","sig":null,"attributes":[{"value":"/ Provide `size` bytes from the underlying raw data.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59786,"byte_end":59840,"line_start":396,"line_end":396,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59845,"byte_end":59848,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ This should only be called within an `Arbitrary` implementation. This is","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59853,"byte_end":59929,"line_start":398,"line_end":398,"column_start":5,"column_end":81}},{"value":"/ a very low-level operation. You should generally prefer calling nested","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":59934,"byte_end":60008,"line_start":399,"line_end":399,"column_start":5,"column_end":79}},{"value":"/ `Arbitrary` implementations like `<Vec<u8>>::arbitrary` and","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60013,"byte_end":60076,"line_start":400,"line_end":400,"column_start":5,"column_end":68}},{"value":"/ `String::arbitrary` over using this method directly.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60081,"byte_end":60137,"line_start":401,"line_end":401,"column_start":5,"column_end":61}},{"value":"/ # Example","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60142,"byte_end":60155,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60160,"byte_end":60163,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60168,"byte_end":60175,"line_start":404,"line_end":404,"column_start":5,"column_end":12}},{"value":"/ use arbitrary::Unstructured;","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60180,"byte_end":60212,"line_start":405,"line_end":405,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60217,"byte_end":60220,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let mut u = Unstructured::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60225,"byte_end":60274,"line_start":407,"line_end":407,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60279,"byte_end":60282,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ assert!(u.get_bytes(2).unwrap() == &[1, 2]);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60287,"byte_end":60335,"line_start":409,"line_end":409,"column_start":5,"column_end":53}},{"value":"/ assert!(u.get_bytes(2).unwrap() == &[3, 4]);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60340,"byte_end":60388,"line_start":410,"line_end":410,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60393,"byte_end":60400,"line_start":411,"line_end":411,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61075,"byte_end":61084,"line_start":437,"line_end":437,"column_start":12,"column_end":21},"name":"take_rest","qualname":"<Unstructured>::take_rest","value":"fn (mut self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Consume all of the rest of the remaining underlying bytes.","sig":null,"attributes":[{"value":"/ Consume all of the rest of the remaining underlying bytes.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60674,"byte_end":60736,"line_start":422,"line_end":422,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60741,"byte_end":60744,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ Returns a slice of all the remaining, unconsumed bytes.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60749,"byte_end":60808,"line_start":424,"line_end":424,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60813,"byte_end":60816,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60821,"byte_end":60834,"line_start":426,"line_end":426,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60839,"byte_end":60842,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60847,"byte_end":60854,"line_start":428,"line_end":428,"column_start":5,"column_end":12}},{"value":"/ use arbitrary::Unstructured;","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60859,"byte_end":60891,"line_start":429,"line_end":429,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60896,"byte_end":60899,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ let mut u = Unstructured::new(&[1, 2, 3]);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60904,"byte_end":60950,"line_start":431,"line_end":431,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60955,"byte_end":60958,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ let mut remaining = u.take_rest();","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":60963,"byte_end":61001,"line_start":433,"line_end":433,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61006,"byte_end":61009,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(remaining, [1, 2, 3]);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61014,"byte_end":61051,"line_start":435,"line_end":435,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61056,"byte_end":61063,"line_start":436,"line_end":436,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61404,"byte_end":61418,"line_start":445,"line_end":445,"column_start":12,"column_end":26},"name":"arbitrary_iter","qualname":"<Unstructured>::arbitrary_iter","value":"fn <'b, ElementType> (&'b mut self) -> Result<ArbitraryIter<'a, 'b, ElementType>>","parent":null,"children":[],"decl_id":null,"docs":" Provide an iterator over elements for constructing a collection","sig":null,"attributes":[{"value":"/ Provide an iterator over elements for constructing a collection","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61162,"byte_end":61229,"line_start":441,"line_end":441,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61234,"byte_end":61237,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ This is useful for implementing [`Arbitrary::arbitrary`] on collections","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61242,"byte_end":61317,"line_start":443,"line_end":443,"column_start":5,"column_end":80}},{"value":"/ since the implementation is simply `u.arbitrary_iter()?.collect()`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61322,"byte_end":61392,"line_start":444,"line_end":444,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":62009,"byte_end":62033,"line_start":461,"line_end":461,"column_start":12,"column_end":36},"name":"arbitrary_take_rest_iter","qualname":"<Unstructured>::arbitrary_take_rest_iter","value":"fn <ElementType> (self) -> Result<ArbitraryTakeRestIter<'a, ElementType>>","parent":null,"children":[],"decl_id":null,"docs":" Provide an iterator over elements for constructing a collection from\n all the remaining bytes.","sig":null,"attributes":[{"value":"/ Provide an iterator over elements for constructing a collection from","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61709,"byte_end":61781,"line_start":456,"line_end":456,"column_start":5,"column_end":77}},{"value":"/ all the remaining bytes.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61786,"byte_end":61814,"line_start":457,"line_end":457,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61819,"byte_end":61822,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ This is useful for implementing [`Arbitrary::arbitrary_take_rest`] on collections","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61827,"byte_end":61912,"line_start":459,"line_end":459,"column_start":5,"column_end":90}},{"value":"/ since the implementation is simply `u.arbitrary_take_rest_iter()?.collect()`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":61917,"byte_end":61997,"line_start":460,"line_end":460,"column_start":5,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":52},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":62547,"byte_end":62560,"line_start":478,"line_end":478,"column_start":12,"column_end":25},"name":"ArbitraryIter","qualname":"::unstructured::ArbitraryIter","value":"ArbitraryIter {  }","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58}],"decl_id":null,"docs":" Utility iterator produced by [`Unstructured::arbitrary_iter`]\n","sig":null,"attributes":[{"value":"/ Utility iterator produced by [`Unstructured::arbitrary_iter`]","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":62470,"byte_end":62535,"line_start":477,"line_end":477,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":65},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63099,"byte_end":63120,"line_start":497,"line_end":497,"column_start":12,"column_end":33},"name":"ArbitraryTakeRestIter","qualname":"::unstructured::ArbitraryTakeRestIter","value":"ArbitraryTakeRestIter {  }","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"decl_id":null,"docs":" Utility iterator produced by [`Unstructured::arbitrary_take_rest_iter`]\n","sig":null,"attributes":[{"value":"/ Utility iterator produced by [`Unstructured::arbitrary_take_rest_iter`]","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63012,"byte_end":63087,"line_start":496,"line_end":496,"column_start":1,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":76},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64115,"byte_end":64118,"line_start":539,"line_end":539,"column_start":11,"column_end":14},"name":"Int","qualname":"::unstructured::Int","value":"Int: Copy + PartialOrd + Ord + ops::Sub<Self, Output = Self> +\nops::Rem<Self, Output = Self> + ops::Shr<Self, Output = Self> +\nops::Shl<usize, Output = Self> + ops::BitOr<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"decl_id":null,"docs":" A trait that is implemented for all of the primitive integers:","sig":null,"attributes":[{"value":"/ A trait that is implemented for all of the primitive integers:","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63841,"byte_end":63907,"line_start":523,"line_end":523,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63908,"byte_end":63911,"line_start":524,"line_end":524,"column_start":1,"column_end":4}},{"value":"/ * `u8`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63912,"byte_end":63922,"line_start":525,"line_end":525,"column_start":1,"column_end":11}},{"value":"/ * `u16`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63923,"byte_end":63934,"line_start":526,"line_end":526,"column_start":1,"column_end":12}},{"value":"/ * `u32`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63935,"byte_end":63946,"line_start":527,"line_end":527,"column_start":1,"column_end":12}},{"value":"/ * `u64`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63947,"byte_end":63958,"line_start":528,"line_end":528,"column_start":1,"column_end":12}},{"value":"/ * `u128`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63959,"byte_end":63971,"line_start":529,"line_end":529,"column_start":1,"column_end":13}},{"value":"/ * `usize`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63972,"byte_end":63985,"line_start":530,"line_end":530,"column_start":1,"column_end":14}},{"value":"/ * `i8`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63986,"byte_end":63996,"line_start":531,"line_end":531,"column_start":1,"column_end":11}},{"value":"/ * `i16`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63997,"byte_end":64008,"line_start":532,"line_end":532,"column_start":1,"column_end":12}},{"value":"/ * `i32`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64009,"byte_end":64020,"line_start":533,"line_end":533,"column_start":1,"column_end":12}},{"value":"/ * `i64`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64021,"byte_end":64032,"line_start":534,"line_end":534,"column_start":1,"column_end":12}},{"value":"/ * `i128`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64033,"byte_end":64045,"line_start":535,"line_end":535,"column_start":1,"column_end":13}},{"value":"/ * `isize`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64046,"byte_end":64059,"line_start":536,"line_end":536,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64060,"byte_end":64063,"line_start":537,"line_end":537,"column_start":1,"column_end":4}},{"value":"/ Don't implement this trait yourself.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64064,"byte_end":64104,"line_start":538,"line_end":538,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":77},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64369,"byte_end":64375,"line_start":550,"line_end":550,"column_start":10,"column_end":16},"name":"Widest","qualname":"::unstructured::Int::Widest","value":"type Widest: Int;","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":78},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64412,"byte_end":64416,"line_start":553,"line_end":553,"column_start":11,"column_end":15},"name":"ZERO","qualname":"::unstructured::Int::ZERO","value":"Self","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":79},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64454,"byte_end":64457,"line_start":556,"line_end":556,"column_start":11,"column_end":14},"name":"ONE","qualname":"::unstructured::Int::ONE","value":"Self","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64492,"byte_end":64501,"line_start":559,"line_end":559,"column_start":8,"column_end":17},"name":"as_widest","qualname":"::unstructured::Int::as_widest","value":"fn (self) -> Self::Widest","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64552,"byte_end":64563,"line_start":562,"line_end":562,"column_start":8,"column_end":19},"name":"from_widest","qualname":"::unstructured::Int::from_widest","value":"fn (w: Self::Widest) -> Self","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64617,"byte_end":64624,"line_start":565,"line_end":565,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::unstructured::Int::from_u8","value":"fn (b: u8) -> Self","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64668,"byte_end":64678,"line_start":568,"line_end":568,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::unstructured::Int::from_usize","value":"fn (u: usize) -> Self","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64725,"byte_end":64736,"line_start":571,"line_end":571,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::unstructured::Int::checked_add","value":"fn (self, rhs: Self) -> Option<Self>","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64798,"byte_end":64810,"line_start":574,"line_end":574,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::unstructured::Int::wrapping_add","value":"fn (self, rhs: Self) -> Self","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":88},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"size_hint","qualname":"::size_hint","value":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":99}],"decl_id":null,"docs":" Utilities for working with and combining the results of\n [`Arbitrary::size_hint`][crate::Arbitrary::size_hint].\n","sig":null,"attributes":[{"value":"! Utilities for working with and combining the results of","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":66879,"byte_end":66938,"line_start":1,"line_end":1,"column_start":1,"column_end":60}},{"value":"! [`Arbitrary::size_hint`][crate::Arbitrary::size_hint].","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":66939,"byte_end":66997,"line_start":2,"line_end":2,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67388,"byte_end":67403,"line_start":15,"line_end":15,"column_start":8,"column_end":23},"name":"recursion_guard","qualname":"::size_hint::recursion_guard","value":"fn (depth: usize, f: impl FnOnce(usize) -> (usize, Option<usize>)) -> (usize, Option<usize>)","parent":null,"children":[],"decl_id":null,"docs":" Protects against potential infinite recursion when calculating size hints\n due to indirect type recursion.","sig":null,"attributes":[{"value":"/ Protects against potential infinite recursion when calculating size hints","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":66999,"byte_end":67076,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"/ due to indirect type recursion.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67077,"byte_end":67112,"line_start":5,"line_end":5,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67113,"byte_end":67116,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ When the depth is not too deep, calls `f` with `depth + 1` to calculate the","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67117,"byte_end":67196,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ size hint.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67197,"byte_end":67211,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67212,"byte_end":67215,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Otherwise, returns the default size hint: `(0, None)`.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67216,"byte_end":67274,"line_start":10,"line_end":10,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67275,"byte_end":67278,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ See the [docs for `Arbitrary::shrink`][crate::Arbitrary::shrink] for example","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67279,"byte_end":67359,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ usage.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67360,"byte_end":67370,"line_start":13,"line_end":13,"column_start":1,"column_end":11}},{"value":"inline","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67371,"byte_end":67380,"line_start":14,"line_end":14,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":92},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67696,"byte_end":67699,"line_start":29,"line_end":29,"column_start":8,"column_end":11},"name":"and","qualname":"::size_hint::and","value":"fn (lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>)","parent":null,"children":[],"decl_id":null,"docs":" Take the sum of the `lhs` and `rhs` size hints.\n","sig":null,"attributes":[{"value":"/ Take the sum of the `lhs` and `rhs` size hints.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67627,"byte_end":67678,"line_start":27,"line_end":27,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67679,"byte_end":67688,"line_start":28,"line_end":28,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":95},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":68063,"byte_end":68070,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"name":"and_all","qualname":"::size_hint::and_all","value":"fn (hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>)","parent":null,"children":[],"decl_id":null,"docs":" Take the sum of all of the given size hints.","sig":null,"attributes":[{"value":"/ Take the sum of all of the given size hints.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67905,"byte_end":67953,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67954,"byte_end":67957,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If `hints` is empty, returns `(0, Some(0))`, aka the size of consuming","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":67958,"byte_end":68032,"line_start":37,"line_end":37,"column_start":1,"column_end":75}},{"value":"/ nothing.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":68033,"byte_end":68045,"line_start":38,"line_end":38,"column_start":1,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":68046,"byte_end":68055,"line_start":39,"line_end":39,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":96},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":68315,"byte_end":68317,"line_start":47,"line_end":47,"column_start":8,"column_end":10},"name":"or","qualname":"::size_hint::or","value":"fn (lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>)","parent":null,"children":[],"decl_id":null,"docs":" Take the minimum of the lower bounds and maximum of the upper bounds in the\n `lhs` and `rhs` size hints.\n","sig":null,"attributes":[{"value":"/ Take the minimum of the lower bounds and maximum of the upper bounds in the","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":68186,"byte_end":68265,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/ `lhs` and `rhs` size hints.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":68266,"byte_end":68297,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":68298,"byte_end":68307,"line_start":46,"line_end":46,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":99},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":68734,"byte_end":68740,"line_start":60,"line_end":60,"column_start":8,"column_end":14},"name":"or_all","qualname":"::size_hint::or_all","value":"fn (hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>)","parent":null,"children":[],"decl_id":null,"docs":" Take the maximum of the `lhs` and `rhs` size hints.","sig":null,"attributes":[{"value":"/ Take the maximum of the `lhs` and `rhs` size hints.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":68569,"byte_end":68624,"line_start":55,"line_end":55,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":68625,"byte_end":68628,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ If `hints` is empty, returns `(0, Some(0))`, aka the size of consuming","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":68629,"byte_end":68703,"line_start":57,"line_end":57,"column_start":1,"column_end":75}},{"value":"/ nothing.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":68704,"byte_end":68716,"line_start":58,"line_end":58,"column_start":1,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/size_hint.rs","byte_start":68717,"byte_end":68726,"line_start":59,"line_end":59,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":140},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4623,"byte_end":4632,"line_start":141,"line_end":141,"column_start":11,"column_end":20},"name":"Arbitrary","qualname":"::Arbitrary","value":"Arbitrary: Sized + 'static","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"decl_id":null,"docs":" Generate arbitrary structured values from raw, unstructured data.","sig":null,"attributes":[{"value":"/ Generate arbitrary structured values from raw, unstructured data.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":1797,"byte_end":1866,"line_start":59,"line_end":59,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":1867,"byte_end":1870,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ The `Arbitrary` trait allows you to generate valid structured values, like","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":1871,"byte_end":1949,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/ `HashMap`s, or ASTs, or `MyTomlConfig`, or any other data structure from","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":1950,"byte_end":2026,"line_start":62,"line_end":62,"column_start":1,"column_end":77}},{"value":"/ raw, unstructured bytes provided by a fuzzer. It also features built-in","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2027,"byte_end":2102,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ shrinking, so that if you find a test case that triggers a bug, you can find","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2103,"byte_end":2183,"line_start":64,"line_end":64,"column_start":1,"column_end":81}},{"value":"/ the smallest, most easiest-to-understand test case that still triggers that","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2184,"byte_end":2263,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/ bug.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2264,"byte_end":2272,"line_start":66,"line_end":66,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2273,"byte_end":2276,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # Deriving `Arbitrary`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2277,"byte_end":2303,"line_start":68,"line_end":68,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2304,"byte_end":2307,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Automatically deriving the `Arbitrary` trait is the recommended way to","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2308,"byte_end":2382,"line_start":70,"line_end":70,"column_start":1,"column_end":75}},{"value":"/ implement `Arbitrary` for your types.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2383,"byte_end":2424,"line_start":71,"line_end":71,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2425,"byte_end":2428,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ Using the custom derive requires that you enable the `\"derive\"` cargo","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2429,"byte_end":2502,"line_start":73,"line_end":73,"column_start":1,"column_end":74}},{"value":"/ feature in your `Cargo.toml`:","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2503,"byte_end":2536,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2537,"byte_end":2540,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2541,"byte_end":2552,"line_start":76,"line_end":76,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2553,"byte_end":2571,"line_start":77,"line_end":77,"column_start":1,"column_end":19}},{"value":"/ arbitrary = { version = \"0.2.0\", features = [\"derive\"] }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2572,"byte_end":2632,"line_start":78,"line_end":78,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2633,"byte_end":2640,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2641,"byte_end":2644,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ Then, you add the `#[derive(Arbitrary)]` annotation to your `struct` or","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2645,"byte_end":2720,"line_start":81,"line_end":81,"column_start":1,"column_end":76}},{"value":"/ `enum` type definition:","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2721,"byte_end":2748,"line_start":82,"line_end":82,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2749,"byte_end":2752,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2753,"byte_end":2760,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"derive\")] mod foo {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2761,"byte_end":2803,"line_start":85,"line_end":85,"column_start":1,"column_end":43}},{"value":"/ use arbitrary::Arbitrary;","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2804,"byte_end":2833,"line_start":86,"line_end":86,"column_start":1,"column_end":30}},{"value":"/ use std::collections::HashSet;","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2834,"byte_end":2868,"line_start":87,"line_end":87,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2869,"byte_end":2872,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ #[derive(Arbitrary)]","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2873,"byte_end":2897,"line_start":89,"line_end":89,"column_start":1,"column_end":25}},{"value":"/ pub struct AddressBook {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2898,"byte_end":2926,"line_start":90,"line_end":90,"column_start":1,"column_end":29}},{"value":"/     friends: HashSet<Friend>,","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2927,"byte_end":2960,"line_start":91,"line_end":91,"column_start":1,"column_end":34}},{"value":"/ }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2961,"byte_end":2966,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2967,"byte_end":2970,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ #[derive(Arbitrary, Hash, Eq, PartialEq)]","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":2971,"byte_end":3016,"line_start":94,"line_end":94,"column_start":1,"column_end":46}},{"value":"/ pub enum Friend {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3017,"byte_end":3038,"line_start":95,"line_end":95,"column_start":1,"column_end":22}},{"value":"/     Buddy { name: String },","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3039,"byte_end":3070,"line_start":96,"line_end":96,"column_start":1,"column_end":32}},{"value":"/     Pal { age: usize },","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3071,"byte_end":3098,"line_start":97,"line_end":97,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3099,"byte_end":3104,"line_start":98,"line_end":98,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3105,"byte_end":3112,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3113,"byte_end":3120,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3121,"byte_end":3124,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ Every member of the `struct` or `enum` must also implement `Arbitrary`.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3125,"byte_end":3200,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3201,"byte_end":3204,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ # Implementing `Arbitrary` By Hand","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3205,"byte_end":3243,"line_start":104,"line_end":104,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3244,"byte_end":3247,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ Implementing `Arbitrary` mostly involves nested calls to other `Arbitrary`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3248,"byte_end":3326,"line_start":106,"line_end":106,"column_start":1,"column_end":79}},{"value":"/ arbitrary implementations for each of your `struct` or `enum`'s members. But","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3327,"byte_end":3407,"line_start":107,"line_end":107,"column_start":1,"column_end":81}},{"value":"/ sometimes you need some amount of raw data, or you need to generate a","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3408,"byte_end":3481,"line_start":108,"line_end":108,"column_start":1,"column_end":74}},{"value":"/ variably-sized collection type, or you something of that sort. The","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3482,"byte_end":3552,"line_start":109,"line_end":109,"column_start":1,"column_end":71}},{"value":"/ [`Unstructured`][crate::Unstructured] type helps you with these tasks.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3553,"byte_end":3627,"line_start":110,"line_end":110,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3628,"byte_end":3631,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3632,"byte_end":3639,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"derive\")] mod foo {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3640,"byte_end":3682,"line_start":113,"line_end":113,"column_start":1,"column_end":43}},{"value":"/ # pub struct MyCollection<T> { _t: std::marker::PhantomData<T> }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3683,"byte_end":3751,"line_start":114,"line_end":114,"column_start":1,"column_end":69}},{"value":"/ # impl<T> MyCollection<T> {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3752,"byte_end":3783,"line_start":115,"line_end":115,"column_start":1,"column_end":32}},{"value":"/ #     pub fn with_capacity(capacity: usize) -> Self { MyCollection { _t: std::marker::PhantomData } }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3784,"byte_end":3889,"line_start":116,"line_end":116,"column_start":1,"column_end":106}},{"value":"/ #     pub fn insert(&mut self, element: T) {}","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3890,"byte_end":3939,"line_start":117,"line_end":117,"column_start":1,"column_end":50}},{"value":"/ # }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3940,"byte_end":3947,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/ use arbitrary::{Arbitrary, Result, Unstructured};","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":3948,"byte_end":4001,"line_start":119,"line_end":119,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4002,"byte_end":4005,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ impl<T> Arbitrary for MyCollection<T>","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4006,"byte_end":4047,"line_start":121,"line_end":121,"column_start":1,"column_end":42}},{"value":"/ where","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4048,"byte_end":4057,"line_start":122,"line_end":122,"column_start":1,"column_end":10}},{"value":"/     T: Arbitrary,","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4058,"byte_end":4079,"line_start":123,"line_end":123,"column_start":1,"column_end":22}},{"value":"/ {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4080,"byte_end":4085,"line_start":124,"line_end":124,"column_start":1,"column_end":6}},{"value":"/     fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4086,"byte_end":4150,"line_start":125,"line_end":125,"column_start":1,"column_end":65}},{"value":"/         // Get the number of `T`s we should insert into our collection.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4151,"byte_end":4226,"line_start":126,"line_end":126,"column_start":1,"column_end":76}},{"value":"/         let len = u.arbitrary_len::<T>()?;","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4227,"byte_end":4273,"line_start":127,"line_end":127,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4274,"byte_end":4277,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/         // And then create a collection of that length!","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4278,"byte_end":4337,"line_start":129,"line_end":129,"column_start":1,"column_end":60}},{"value":"/         let mut my_collection = MyCollection::with_capacity(len);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4338,"byte_end":4407,"line_start":130,"line_end":130,"column_start":1,"column_end":70}},{"value":"/         for _ in 0..len {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4408,"byte_end":4437,"line_start":131,"line_end":131,"column_start":1,"column_end":30}},{"value":"/             let element = T::arbitrary(u)?;","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4438,"byte_end":4485,"line_start":132,"line_end":132,"column_start":1,"column_end":48}},{"value":"/             my_collection.insert(element);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4486,"byte_end":4532,"line_start":133,"line_end":133,"column_start":1,"column_end":47}},{"value":"/         }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4533,"byte_end":4546,"line_start":134,"line_end":134,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4547,"byte_end":4550,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/         Ok(my_collection)","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4551,"byte_end":4580,"line_start":136,"line_end":136,"column_start":1,"column_end":30}},{"value":"/     }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4581,"byte_end":4590,"line_start":137,"line_end":137,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4591,"byte_end":4596,"line_start":138,"line_end":138,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4597,"byte_end":4604,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4605,"byte_end":4612,"line_start":140,"line_end":140,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6354,"byte_end":6363,"line_start":182,"line_end":182,"column_start":8,"column_end":17},"name":"arbitrary","qualname":"::Arbitrary::arbitrary","value":"fn (u: &mut Unstructured<'_>) -> Result<Self>","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Generate an arbitrary value of `Self` from the given unstructured data.","sig":null,"attributes":[{"value":"/ Generate an arbitrary value of `Self` from the given unstructured data.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4656,"byte_end":4731,"line_start":142,"line_end":142,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4736,"byte_end":4739,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Calling `Arbitrary::arbitrary` requires that you have some raw data,","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4744,"byte_end":4816,"line_start":144,"line_end":144,"column_start":5,"column_end":77}},{"value":"/ perhaps given to you by a fuzzer like AFL or libFuzzer. You wrap this","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4821,"byte_end":4894,"line_start":145,"line_end":145,"column_start":5,"column_end":78}},{"value":"/ raw data in an `Unstructured`, and then you can call `<MyType as","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4899,"byte_end":4967,"line_start":146,"line_end":146,"column_start":5,"column_end":73}},{"value":"/ Arbitrary>::arbitrary` to construct an arbitrary instance of `MyType`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4972,"byte_end":5045,"line_start":147,"line_end":147,"column_start":5,"column_end":78}},{"value":"/ from that unstuctured data.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5050,"byte_end":5081,"line_start":148,"line_end":148,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5086,"byte_end":5089,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Implementation may return an error if there is not enough data to","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5094,"byte_end":5163,"line_start":150,"line_end":150,"column_start":5,"column_end":74}},{"value":"/ construct a full instance of `Self`. This is generally OK: it is better","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5168,"byte_end":5243,"line_start":151,"line_end":151,"column_start":5,"column_end":80}},{"value":"/ to exit early and get the fuzzer to provide more input data, than it is","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5248,"byte_end":5323,"line_start":152,"line_end":152,"column_start":5,"column_end":80}},{"value":"/ to generate default values in place of the missing data, which would","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5328,"byte_end":5400,"line_start":153,"line_end":153,"column_start":5,"column_end":77}},{"value":"/ bias the distribution of generated values, and ultimately make fuzzing","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5405,"byte_end":5479,"line_start":154,"line_end":154,"column_start":5,"column_end":79}},{"value":"/ less efficient.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5484,"byte_end":5503,"line_start":155,"line_end":155,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5508,"byte_end":5511,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5516,"byte_end":5523,"line_start":157,"line_end":157,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(feature = \"derive\")] fn foo() {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5528,"byte_end":5571,"line_start":158,"line_end":158,"column_start":5,"column_end":48}},{"value":"/ use arbitrary::{Arbitrary, Unstructured};","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5576,"byte_end":5621,"line_start":159,"line_end":159,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5626,"byte_end":5629,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ #[derive(Arbitrary)]","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5634,"byte_end":5658,"line_start":161,"line_end":161,"column_start":5,"column_end":29}},{"value":"/ pub struct MyType {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5663,"byte_end":5686,"line_start":162,"line_end":162,"column_start":5,"column_end":28}},{"value":"/     // ...","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5691,"byte_end":5705,"line_start":163,"line_end":163,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5710,"byte_end":5715,"line_start":164,"line_end":164,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5720,"byte_end":5723,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ // Get the raw data from the fuzzer or wherever else.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5728,"byte_end":5785,"line_start":166,"line_end":166,"column_start":5,"column_end":62}},{"value":"/ # let get_raw_data_from_fuzzer = || &[];","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5790,"byte_end":5834,"line_start":167,"line_end":167,"column_start":5,"column_end":49}},{"value":"/ let raw_data: &[u8] = get_raw_data_from_fuzzer();","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5839,"byte_end":5892,"line_start":168,"line_end":168,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5897,"byte_end":5900,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ // Wrap that raw data in an `Unstructured`.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5905,"byte_end":5952,"line_start":170,"line_end":170,"column_start":5,"column_end":52}},{"value":"/ let mut unstructured = Unstructured::new(raw_data);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":5957,"byte_end":6012,"line_start":171,"line_end":171,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6017,"byte_end":6020,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ // Generate an arbitrary instance of `MyType` and do stuff with it.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6025,"byte_end":6096,"line_start":173,"line_end":173,"column_start":5,"column_end":76}},{"value":"/ if let Ok(value) = MyType::arbitrary(&mut unstructured) {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6101,"byte_end":6162,"line_start":174,"line_end":174,"column_start":5,"column_end":66}},{"value":"/ #   let do_stuff = |_| {};","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6167,"byte_end":6197,"line_start":175,"line_end":175,"column_start":5,"column_end":35}},{"value":"/     do_stuff(value);","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6202,"byte_end":6226,"line_start":176,"line_end":176,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6231,"byte_end":6236,"line_start":177,"line_end":177,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6241,"byte_end":6248,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6253,"byte_end":6260,"line_start":179,"line_end":179,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6265,"byte_end":6268,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ See also the documentation for [`Unstructured`][crate::Unstructured].","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6273,"byte_end":6346,"line_start":181,"line_end":181,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6769,"byte_end":6788,"line_start":189,"line_end":189,"column_start":8,"column_end":27},"name":"arbitrary_take_rest","qualname":"::Arbitrary::arbitrary_take_rest","value":"fn (mut u: Unstructured<'_>) -> Result<Self>","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Generate an arbitrary value of `Self` from the entirety of the given unstructured data.","sig":null,"attributes":[{"value":"/ Generate an arbitrary value of `Self` from the entirety of the given unstructured data.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6412,"byte_end":6503,"line_start":184,"line_end":184,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6508,"byte_end":6511,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ This is similar to Arbitrary::arbitrary, however it assumes that it is the","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6516,"byte_end":6594,"line_start":186,"line_end":186,"column_start":5,"column_end":83}},{"value":"/ last consumer of the given data, and is thus able to consume it all if it needs.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6599,"byte_end":6683,"line_start":187,"line_end":187,"column_start":5,"column_end":89}},{"value":"/ See also the documentation for [`Unstructured`][crate::Unstructured].","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6688,"byte_end":6761,"line_start":188,"line_end":188,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10188,"byte_end":10197,"line_start":266,"line_end":266,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::Arbitrary::size_hint","value":"fn (depth: usize) -> (usize, Option<usize>)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Get a size hint for how many bytes out of an `Unstructured` this type\n needs to construct itself.","sig":null,"attributes":[{"value":"/ Get a size hint for how many bytes out of an `Unstructured` this type","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6875,"byte_end":6948,"line_start":193,"line_end":193,"column_start":5,"column_end":78}},{"value":"/ needs to construct itself.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6953,"byte_end":6983,"line_start":194,"line_end":194,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6988,"byte_end":6991,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ This is useful for determining how many elements we should insert when","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":6996,"byte_end":7070,"line_start":196,"line_end":196,"column_start":5,"column_end":79}},{"value":"/ creating an arbitrary collection.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7075,"byte_end":7112,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7117,"byte_end":7120,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ The return value is similar to","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7125,"byte_end":7159,"line_start":199,"line_end":199,"column_start":5,"column_end":39}},{"value":"/ [`Iterator::size_hint`][iterator-size-hint]: it returns a tuple where","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7164,"byte_end":7237,"line_start":200,"line_end":200,"column_start":5,"column_end":78}},{"value":"/ the first element is a lower bound on the number of bytes required, and","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7242,"byte_end":7317,"line_start":201,"line_end":201,"column_start":5,"column_end":80}},{"value":"/ the second element is an optional upper bound.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7322,"byte_end":7372,"line_start":202,"line_end":202,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7377,"byte_end":7380,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ The default implementation return `(0, None)` which is correct for any","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7385,"byte_end":7459,"line_start":204,"line_end":204,"column_start":5,"column_end":79}},{"value":"/ type, but not ultimately that useful. Using `#[derive(Arbitrary)]` will","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7464,"byte_end":7539,"line_start":205,"line_end":205,"column_start":5,"column_end":80}},{"value":"/ create a better implementation. If you are writing an `Arbitrary`","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7544,"byte_end":7613,"line_start":206,"line_end":206,"column_start":5,"column_end":74}},{"value":"/ implementation by hand, and your type can be part of a dynamically sized","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7618,"byte_end":7694,"line_start":207,"line_end":207,"column_start":5,"column_end":81}},{"value":"/ collection (such as `Vec`), you are strongly encouraged to override this","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7699,"byte_end":7775,"line_start":208,"line_end":208,"column_start":5,"column_end":81}},{"value":"/ default with a better implementation. The","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7780,"byte_end":7825,"line_start":209,"line_end":209,"column_start":5,"column_end":50}},{"value":"/ [`size_hint`][crate::size_hint] module will help with this task.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7830,"byte_end":7898,"line_start":210,"line_end":210,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7903,"byte_end":7906,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ ## The `depth` Parameter","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7911,"byte_end":7939,"line_start":212,"line_end":212,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7944,"byte_end":7947,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ If you 100% know that the type you are implementing `Arbitrary` for is","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":7952,"byte_end":8026,"line_start":214,"line_end":214,"column_start":5,"column_end":79}},{"value":"/ not a recursive type, or your implementation is not transitively calling","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8031,"byte_end":8107,"line_start":215,"line_end":215,"column_start":5,"column_end":81}},{"value":"/ any other `size_hint` methods, you can ignore the `depth` parameter.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8112,"byte_end":8184,"line_start":216,"line_end":216,"column_start":5,"column_end":77}},{"value":"/ Note that if you are implementing `Arbitrary` for a generic type, you","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8189,"byte_end":8262,"line_start":217,"line_end":217,"column_start":5,"column_end":78}},{"value":"/ cannot guarantee the lack of type recrusion!","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8267,"byte_end":8315,"line_start":218,"line_end":218,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8320,"byte_end":8323,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Otherwise, you need to use","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8328,"byte_end":8358,"line_start":220,"line_end":220,"column_start":5,"column_end":35}},{"value":"/ [`arbitrary::size_hint::recursion_guard(depth)`][crate::size_hint::recursion_guard]","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8363,"byte_end":8450,"line_start":221,"line_end":221,"column_start":5,"column_end":92}},{"value":"/ to prevent potential infinite recursion when calculating size hints for","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8455,"byte_end":8530,"line_start":222,"line_end":222,"column_start":5,"column_end":80}},{"value":"/ potentially recursive types:","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8535,"byte_end":8567,"line_start":223,"line_end":223,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8572,"byte_end":8575,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8580,"byte_end":8587,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ use arbitrary::{Arbitrary, Unstructured, size_hint};","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8592,"byte_end":8648,"line_start":226,"line_end":226,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8653,"byte_end":8656,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ // This can potentially be a recursive type if `L` or `R` contain","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8661,"byte_end":8730,"line_start":228,"line_end":228,"column_start":5,"column_end":74}},{"value":"/ // something like `Box<Option<MyEither<L, R>>>`!","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8735,"byte_end":8787,"line_start":229,"line_end":229,"column_start":5,"column_end":57}},{"value":"/ enum MyEither<L, R> {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8792,"byte_end":8817,"line_start":230,"line_end":230,"column_start":5,"column_end":30}},{"value":"/     Left(L),","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8822,"byte_end":8838,"line_start":231,"line_end":231,"column_start":5,"column_end":21}},{"value":"/     Right(R),","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8843,"byte_end":8860,"line_start":232,"line_end":232,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8865,"byte_end":8870,"line_start":233,"line_end":233,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8875,"byte_end":8878,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ impl<L, R> Arbitrary for MyEither<L, R>","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8883,"byte_end":8926,"line_start":235,"line_end":235,"column_start":5,"column_end":48}},{"value":"/ where","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8931,"byte_end":8940,"line_start":236,"line_end":236,"column_start":5,"column_end":14}},{"value":"/     L: Arbitrary,","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8945,"byte_end":8966,"line_start":237,"line_end":237,"column_start":5,"column_end":26}},{"value":"/     R: Arbitrary,","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8971,"byte_end":8992,"line_start":238,"line_end":238,"column_start":5,"column_end":26}},{"value":"/ {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":8997,"byte_end":9002,"line_start":239,"line_end":239,"column_start":5,"column_end":10}},{"value":"/     fn arbitrary(u: &mut Unstructured) -> arbitrary::Result<Self> {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9007,"byte_end":9078,"line_start":240,"line_end":240,"column_start":5,"column_end":76}},{"value":"/         // ...","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9083,"byte_end":9101,"line_start":241,"line_end":241,"column_start":5,"column_end":23}},{"value":"/ #       unimplemented!()","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9106,"byte_end":9134,"line_start":242,"line_end":242,"column_start":5,"column_end":33}},{"value":"/     }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9139,"byte_end":9148,"line_start":243,"line_end":243,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9153,"byte_end":9156,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/     fn size_hint(depth: usize) -> (usize, Option<usize>) {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9161,"byte_end":9223,"line_start":245,"line_end":245,"column_start":5,"column_end":67}},{"value":"/         // Protect against potential infinite recursion with","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9228,"byte_end":9292,"line_start":246,"line_end":246,"column_start":5,"column_end":69}},{"value":"/         // `recursion_guard`.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9297,"byte_end":9330,"line_start":247,"line_end":247,"column_start":5,"column_end":38}},{"value":"/         size_hint::recursion_guard(depth, |depth| {","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9335,"byte_end":9390,"line_start":248,"line_end":248,"column_start":5,"column_end":60}},{"value":"/             // If we aren't too deep, then `recursion_guard` calls","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9395,"byte_end":9465,"line_start":249,"line_end":249,"column_start":5,"column_end":75}},{"value":"/             // this closure, which implements the natural size hint.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9470,"byte_end":9542,"line_start":250,"line_end":250,"column_start":5,"column_end":77}},{"value":"/             // Don't forget to use the new `depth` in all nested","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9547,"byte_end":9615,"line_start":251,"line_end":251,"column_start":5,"column_end":73}},{"value":"/             // `size_hint` calls! We recommend shadowing the","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9620,"byte_end":9684,"line_start":252,"line_end":252,"column_start":5,"column_end":69}},{"value":"/             // parameter, like what is done here, so that you can't","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9689,"byte_end":9760,"line_start":253,"line_end":253,"column_start":5,"column_end":76}},{"value":"/             // accidentally use the wrong depth.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9765,"byte_end":9817,"line_start":254,"line_end":254,"column_start":5,"column_end":57}},{"value":"/             size_hint::or(","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9822,"byte_end":9852,"line_start":255,"line_end":255,"column_start":5,"column_end":35}},{"value":"/                 <L as Arbitrary>::size_hint(depth),","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9857,"byte_end":9912,"line_start":256,"line_end":256,"column_start":5,"column_end":60}},{"value":"/                 <R as Arbitrary>::size_hint(depth),","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9917,"byte_end":9972,"line_start":257,"line_end":257,"column_start":5,"column_end":60}},{"value":"/             )","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9977,"byte_end":9994,"line_start":258,"line_end":258,"column_start":5,"column_end":22}},{"value":"/         })","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":9999,"byte_end":10013,"line_start":259,"line_end":259,"column_start":5,"column_end":19}},{"value":"/     }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10018,"byte_end":10027,"line_start":260,"line_end":260,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10032,"byte_end":10037,"line_start":261,"line_end":261,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10042,"byte_end":10049,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10054,"byte_end":10057,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ [iterator-size-hint]: https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.size_hint","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10062,"byte_end":10166,"line_start":264,"line_end":264,"column_start":5,"column_end":109}},{"value":"inline","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10171,"byte_end":10180,"line_start":265,"line_end":265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":11078,"byte_end":11084,"line_start":286,"line_end":286,"column_start":8,"column_end":14},"name":"shrink","qualname":"::Arbitrary::shrink","value":"fn (&self) -> Box<dyn Iterator<Item = Self>>","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Generate an iterator of derived values which are \"smaller\" than the\n original `self` instance.","sig":null,"attributes":[{"value":"/ Generate an iterator of derived values which are \"smaller\" than the","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10292,"byte_end":10363,"line_start":271,"line_end":271,"column_start":5,"column_end":76}},{"value":"/ original `self` instance.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10368,"byte_end":10397,"line_start":272,"line_end":272,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10402,"byte_end":10405,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ You can use this to help find the smallest test case that reproduces a","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10410,"byte_end":10484,"line_start":274,"line_end":274,"column_start":5,"column_end":79}},{"value":"/ bug.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10489,"byte_end":10497,"line_start":275,"line_end":275,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10502,"byte_end":10505,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Using `#[derive(Arbitrary)]` will automatically implement shrinking for","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10510,"byte_end":10585,"line_start":277,"line_end":277,"column_start":5,"column_end":80}},{"value":"/ your type.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10590,"byte_end":10604,"line_start":278,"line_end":278,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10609,"byte_end":10612,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ However, if you are implementing `Arbirary` by hand and you want support","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10617,"byte_end":10693,"line_start":280,"line_end":280,"column_start":5,"column_end":81}},{"value":"/ for shrinking your type, you must override the default provided","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10698,"byte_end":10765,"line_start":281,"line_end":281,"column_start":5,"column_end":72}},{"value":"/ implementation of `shrink`, which just returns an empty iterator. You","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10770,"byte_end":10843,"line_start":282,"line_end":282,"column_start":5,"column_end":78}},{"value":"/ should try pretty hard to have your `shrink` implementation return a","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10848,"byte_end":10920,"line_start":283,"line_end":283,"column_start":5,"column_end":77}},{"value":"/ *lazy* iterator: one that computes the next value as it is needed,","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":10925,"byte_end":10995,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/ rather than computing them up front when `shrink` is first called.","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":11000,"byte_end":11070,"line_start":285,"line_end":285,"column_start":5,"column_end":75}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":45713,"byte_end":45718,"line_start":14,"line_end":14,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":8}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":46182,"byte_end":46187,"line_start":29,"line_end":29,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49088,"byte_end":49100,"line_start":74,"line_end":74,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":62726,"byte_end":62739,"line_start":484,"line_end":484,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63278,"byte_end":63299,"line_start":503,"line_end":503,"column_start":47,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":16312,"byte_end":16322,"line_start":455,"line_end":455,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":16780,"byte_end":16791,"line_start":474,"line_end":474,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":17210,"byte_end":17221,"line_start":490,"line_end":490,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":17643,"byte_end":17648,"line_start":506,"line_end":506,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":18343,"byte_end":18357,"line_start":530,"line_end":530,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":19279,"byte_end":19287,"line_start":566,"line_end":566,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":20007,"byte_end":20013,"line_start":591,"line_end":591,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":20759,"byte_end":20765,"line_start":617,"line_end":617,"column_start":61,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":26430,"byte_end":26433,"line_start":795,"line_end":795,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":27001,"byte_end":27009,"line_start":814,"line_end":814,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":27703,"byte_end":27711,"line_start":835,"line_end":835,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":28359,"byte_end":28369,"line_start":855,"line_end":855,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":29050,"byte_end":29057,"line_start":875,"line_end":875,"column_start":73,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":29770,"byte_end":29777,"line_start":896,"line_end":896,"column_start":59,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":30419,"byte_end":30429,"line_start":916,"line_end":916,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":31071,"byte_end":31079,"line_start":936,"line_end":936,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":31710,"byte_end":31713,"line_start":956,"line_end":956,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":32399,"byte_end":32405,"line_start":980,"line_end":980,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":305},{"krate":0,"index":307},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":33279,"byte_end":33286,"line_start":1007,"line_end":1007,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":315},{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":33918,"byte_end":33926,"line_start":1028,"line_end":1028,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":34492,"byte_end":34499,"line_start":1047,"line_end":1047,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":34953,"byte_end":34956,"line_start":1063,"line_end":1063,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":35401,"byte_end":35404,"line_start":1078,"line_end":1078,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":35862,"byte_end":35865,"line_start":1093,"line_end":1093,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":345},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":36802,"byte_end":36805,"line_start":1122,"line_end":1122,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":37250,"byte_end":37252,"line_start":1137,"line_end":1137,"column_start":34,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":37697,"byte_end":37701,"line_start":1152,"line_end":1152,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":38157,"byte_end":38164,"line_start":1167,"line_end":1167,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":38582,"byte_end":38592,"line_start":1183,"line_end":1183,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":39027,"byte_end":39032,"line_start":1197,"line_end":1197,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":39508,"byte_end":39513,"line_start":1215,"line_end":1215,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":39797,"byte_end":39808,"line_start":1228,"line_end":1228,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":40102,"byte_end":40110,"line_start":1241,"line_end":1241,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":1052,"byte_end":1064,"line_start":31,"line_end":31,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":13}},{"kind":"Mod","span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":1126,"byte_end":1135,"line_start":35,"line_end":35,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":88}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":45713,"byte_end":45718,"line_start":14,"line_end":14,"column_start":23,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":392},"to":{"krate":2,"index":6074}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/error.rs","byte_start":46182,"byte_end":46187,"line_start":29,"line_end":29,"column_start":23,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":392},"to":{"krate":1,"index":1634}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":49088,"byte_end":49100,"line_start":74,"line_end":74,"column_start":10,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":22},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":62726,"byte_end":62739,"line_start":484,"line_end":484,"column_start":51,"column_end":64},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":52},"to":{"krate":2,"index":4852}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":63278,"byte_end":63299,"line_start":503,"line_end":503,"column_start":47,"column_end":68},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":65},"to":{"krate":2,"index":4852}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64124,"byte_end":64128,"line_start":540,"line_end":540,"column_start":5,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":1914},"to":{"krate":0,"index":76}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64135,"byte_end":64145,"line_start":541,"line_end":541,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1671},"to":{"krate":0,"index":76}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64152,"byte_end":64155,"line_start":542,"line_end":542,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1660},"to":{"krate":0,"index":76}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64167,"byte_end":64170,"line_start":543,"line_end":543,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":1972},"to":{"krate":0,"index":76}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64203,"byte_end":64206,"line_start":544,"line_end":544,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":1988},"to":{"krate":0,"index":76}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64239,"byte_end":64242,"line_start":545,"line_end":545,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":2044},"to":{"krate":0,"index":76}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64275,"byte_end":64278,"line_start":546,"line_end":546,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":2038},"to":{"krate":0,"index":76}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/unstructured.rs","byte_start":64312,"byte_end":64317,"line_start":547,"line_end":547,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":2028},"to":{"krate":0,"index":76}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":4634,"byte_end":4639,"line_start":141,"line_end":141,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":1909},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":16312,"byte_end":16322,"line_start":455,"line_end":455,"column_start":20,"column_end":30},"kind":{"Impl":{"id":31}},"from":{"krate":2,"index":5723},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":16780,"byte_end":16791,"line_start":474,"line_end":474,"column_start":20,"column_end":31},"kind":{"Impl":{"id":32}},"from":{"krate":2,"index":30076},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":17210,"byte_end":17221,"line_start":490,"line_end":490,"column_start":20,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":2,"index":30107},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":17643,"byte_end":17648,"line_start":506,"line_end":506,"column_start":23,"column_end":28},"kind":{"Impl":{"id":34}},"from":{"krate":2,"index":28132},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":18343,"byte_end":18357,"line_start":530,"line_end":530,"column_start":23,"column_end":37},"kind":{"Impl":{"id":35}},"from":{"krate":2,"index":28198},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":19279,"byte_end":19287,"line_start":566,"line_end":566,"column_start":20,"column_end":28},"kind":{"Impl":{"id":36}},"from":{"krate":2,"index":31999},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":20007,"byte_end":20013,"line_start":591,"line_end":591,"column_start":34,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":2,"index":29547},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":20759,"byte_end":20765,"line_start":617,"line_end":617,"column_start":61,"column_end":67},"kind":{"Impl":{"id":38}},"from":{"krate":2,"index":29668},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":26430,"byte_end":26433,"line_start":795,"line_end":795,"column_start":34,"column_end":37},"kind":{"Impl":{"id":39}},"from":{"krate":5,"index":4166},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":27001,"byte_end":27009,"line_start":814,"line_end":814,"column_start":54,"column_end":62},"kind":{"Impl":{"id":40}},"from":{"krate":5,"index":670},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":27703,"byte_end":27711,"line_start":835,"line_end":835,"column_start":40,"column_end":48},"kind":{"Impl":{"id":41}},"from":{"krate":5,"index":4682},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":28359,"byte_end":28369,"line_start":855,"line_end":855,"column_start":40,"column_end":50},"kind":{"Impl":{"id":42}},"from":{"krate":5,"index":412},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":29050,"byte_end":29057,"line_start":875,"line_end":875,"column_start":73,"column_end":80},"kind":{"Impl":{"id":43}},"from":{"krate":1,"index":6277},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":29770,"byte_end":29777,"line_start":896,"line_end":896,"column_start":59,"column_end":66},"kind":{"Impl":{"id":44}},"from":{"krate":1,"index":6303},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":30419,"byte_end":30429,"line_start":916,"line_end":916,"column_start":34,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":5,"index":2076},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":31071,"byte_end":31079,"line_start":936,"line_end":936,"column_start":34,"column_end":42},"kind":{"Impl":{"id":46}},"from":{"krate":5,"index":2495},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":31710,"byte_end":31713,"line_start":956,"line_end":956,"column_start":23,"column_end":26},"kind":{"Impl":{"id":47}},"from":{"krate":5,"index":323},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":32399,"byte_end":32405,"line_start":980,"line_end":980,"column_start":20,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":5,"index":4867},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":33279,"byte_end":33286,"line_start":1007,"line_end":1007,"column_start":20,"column_end":27},"kind":{"Impl":{"id":49}},"from":{"krate":1,"index":6345},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":33918,"byte_end":33926,"line_start":1028,"line_end":1028,"column_start":20,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":1,"index":6431},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":34492,"byte_end":34499,"line_start":1047,"line_end":1047,"column_start":20,"column_end":27},"kind":{"Impl":{"id":51}},"from":{"krate":1,"index":7066},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":34953,"byte_end":34956,"line_start":1063,"line_end":1063,"column_start":34,"column_end":37},"kind":{"Impl":{"id":52}},"from":{"krate":5,"index":81},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":35401,"byte_end":35404,"line_start":1078,"line_end":1078,"column_start":34,"column_end":37},"kind":{"Impl":{"id":53}},"from":{"krate":5,"index":81},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":35862,"byte_end":35865,"line_start":1093,"line_end":1093,"column_start":20,"column_end":23},"kind":{"Impl":{"id":54}},"from":{"krate":5,"index":81},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":36802,"byte_end":36805,"line_start":1122,"line_end":1122,"column_start":34,"column_end":37},"kind":{"Impl":{"id":55}},"from":{"krate":5,"index":3840},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":37250,"byte_end":37252,"line_start":1137,"line_end":1137,"column_start":34,"column_end":36},"kind":{"Impl":{"id":56}},"from":{"krate":5,"index":2993},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":37697,"byte_end":37701,"line_start":1152,"line_end":1152,"column_start":34,"column_end":38},"kind":{"Impl":{"id":57}},"from":{"krate":2,"index":2758},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":38157,"byte_end":38164,"line_start":1167,"line_end":1167,"column_start":34,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":2,"index":2815},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":38582,"byte_end":38592,"line_start":1183,"line_end":1183,"column_start":34,"column_end":44},"kind":{"Impl":{"id":59}},"from":{"krate":2,"index":2961},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":39027,"byte_end":39032,"line_start":1197,"line_end":1197,"column_start":34,"column_end":39},"kind":{"Impl":{"id":60}},"from":{"krate":1,"index":5066},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":39508,"byte_end":39513,"line_start":1215,"line_end":1215,"column_start":40,"column_end":45},"kind":{"Impl":{"id":61}},"from":{"krate":2,"index":4610},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":39797,"byte_end":39808,"line_start":1228,"line_end":1228,"column_start":49,"column_end":60},"kind":{"Impl":{"id":62}},"from":{"krate":2,"index":1922},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/ryota/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.4.5/src/lib.rs","byte_start":40102,"byte_end":40110,"line_start":1241,"line_end":1241,"column_start":46,"column_end":54},"kind":{"Impl":{"id":63}},"from":{"krate":2,"index":11338},"to":{"krate":0,"index":140}}]}